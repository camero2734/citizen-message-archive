---
import Piece, { type Props as PieceProps } from '../components/Piece.astro';
import Clue from '../components/Clue.astro';
import Layout from '../layouts/Layout.astro';
import Letter from '../components/Letter.astro';

import data from '../data.json' assert { type: 'json' };

// Create last updated date in format
const lastUpdated = new Date().toLocaleString('en-GB', {
	day: '2-digit',
	month: 'long',
	year: 'numeric',
	hour: '2-digit',
	minute: '2-digit',
	second: '2-digit',
	timeZoneName: 'short',
});

const pieces = data.pieces.map(piece => ({ ...piece, date: new Date(piece.date) }));

const cardData: PieceProps[] =  pieces.sort((a, b) => +a.number - +b.number);
const allClues: (PieceProps | string)[] = [];

const formatNumber = (number: number) => number.toString().padStart(3, '0');

let lastNumber = 0;
for (const card of cardData) {
	if (isNaN(+card.number)) continue;
	const number = +card.number;

	if (lastNumber + 1 !== number) {
		if (lastNumber + 1 === number - 1) allClues.push(formatNumber(lastNumber + 1));
		else allClues.push(`${formatNumber(lastNumber + 1)}-${formatNumber(number - 1)}`);
	}

	allClues.push(card);
	lastNumber = number;
}
allClues.push(`${formatNumber(lastNumber + 1)}-???`);

// Remove pieces in letter
const piecesInLetters = new Set<string>();
for (const letter of data.letters) {
	for (const piece of letter.pieces) piecesInLetters.add(piece);
}

const clues = allClues.filter(c => {
	if (typeof c === 'string') return true;
	return !piecesInLetters.has(c.number);
});


---

<Layout title="Digital Encrypted Message Archive">
	<main>
		<h1>Citizen <span class="text-gradient">Message Archive</span></h1>
		<aside class="disclaimer">
			<p>Welcome to the <span class="dema">Digital Encrypted Message Archive</span>, an unofficial archive of messages from citizens across Dema.</p>
			<p class="last-updated"><b>{cardData.length} archived.</b> Last updated: {lastUpdated}</p>
		</aside>

		<h2 class="list-heading" id="completed-letters">Completed Letters</h2>

		<ol class="letters">
			{
				data.letters.map((letter) => (
					<Letter
						numbers={letter.pieces}
						page={letter.number}
						sender={letter.sender}
						recipient={letter.recipient}
						text={letter.text}
						decoded={letter.decoded}
					/>
				))
			}
		</ol>

		<h2 class="list-heading" id="collected-clues">Remaining Pieces</h2>
		<ol class="clues">
			{clues.map((clue) => typeof clue === "string"
				? <li class="placeholder">{clue}</li>
				: <Clue clue={clue.clue} number={clue.number as string} />)}
		</ol>

		<h2 class="list-heading" id="most-recent">Most recent pieces</h2>
		<ol class="list">
			{cardData.sort((a, b) => b.date.getTime() - a.date.getTime()).map((card) => (
				<Piece {...card} />
			))}
		</ol>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.5;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}

	.clues {
		list-style: none;
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(10ch, 1fr));
		justify-content: start;
		gap: 2em 1em;
		padding: 0;
	}

	.letters {
		list-style: none;
		padding: 0;

		display: flex;
		flex-direction: column;
		gap: 0.5em;
	}

	.list {
		display: flex;
		flex-direction: column;
		gap: 2em;
		padding: 0;
		margin: 0;
		width: 100%;
	}

	.list-heading {
		font-size: inherit;
		color: #777;
		padding-bottom: 0;
		padding-top: 1.5em;
	}

	.disclaimer {
		color: #777;
		display: flex;
		flex-direction: column;
		align-items: center;
		margin: 0;
		padding: 0;
		text-align: center;
	}

	.disclaimer p {
		max-width: 600px;
		margin-bottom: 0;
	}

	.last-updated {
		font-size: 0.8em;
	}

	.dema {
		font-weight: bold;
		color: #999;
	}

	.placeholder {
		opacity: 0.25;
		text-shadow: 
			0 0 2px rgb(var(--accent-light)),
			0 0 4px rgb(var(--accent)),
			0 0 6px rgb(var(--accent-dark));
	}

	@media (max-width: 500px) {
		.clues {
			font-size: 0.75em;
		}
	}
</style>
